services:

  api-gateway:
    container_name: api-gateway
    restart: unless-stopped
    build:
      context: ./server/ApiGateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server/ApiGateway/nginx.conf:/etc/nginx/nginx.conf
      - ./server/ApiGateway/certificates/localhost.key:/etc/nginx/certificates/localhost.key
      - ./server/ApiGateway/certificates/localhost.crt:/etc/nginx/certificates/localhost.crt
    extra_hosts:
      - "host.docker.internal:host-gateway"

  user-service:
    container_name: user-service
    restart: unless-stopped
    build:
      context: .
      dockerfile: server/UsersDockerfile
    ports:
      - "7001:7001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=Host=postgres;Port=5432;Database=cinema_users;Username=postgres;Password=1;Timezone=Europe/Minsk;
    volumes:
      - ./server/ApiGateway/certificates/localhost.pfx:/app/localhost.pfx  


  movie-service:
    container_name: movie-service
    restart: unless-stopped
    build:
      context: .
      dockerfile: server/MoviesDockerfile
    ports:
      - "7002:7002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=Host=postgres;Port=5432;Database=cinema_movies;Username=postgres;Password=1;Timezone=Europe/Minsk;
      - REDIS_CONFIGURATION=redis:6379
      - LOGSTASH_PORT=5044
    volumes:
      - ./server/ApiGateway/certificates/localhost.pfx:/app/localhost.pfx  


#   booking-service:
#     build:
#       context: ./server
#       dockerfile: Microservices/BookingService/BookingService.API/Dockerfile
#     ports:
#       - "5003:5000"
#     depends_on:
#       - postgres
#       - redis
#       - rabbitmq


  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # rabbitmq:
  #   container_name: rabbit-mq
  #   image: rabbitmq:3-management-alpine
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   restart: unless-stopped

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    environment:
      REDIS_PASSWORD: 1
    ports:
      - 6379:6379

    
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.16.2
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xms512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data


  logstash:
    container_name: logstash
    image: logstash:8.17.0
    restart: unless-stopped
    ports:
      - "5044:5044"
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - XPACK_MONITORING_ENABLED=false
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch


  kibana:
    container_name: kibana
    image: kibana:8.14.3
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:            
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
      

volumes:
  postgres-data:
  elasticsearch_data: