services:

  api-gateway:
    container_name: api-gateway
    build:
      context: ./server/ApiGateway
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./server/ApiGateway/nginx.conf:/etc/nginx/nginx.conf
      - ./server/ApiGateway/certificates/localhost.key:/etc/nginx/certificates/localhost.key
      - ./server/ApiGateway/certificates/localhost.crt:/etc/nginx/certificates/localhost.crt
    extra_hosts:
      - "host.docker.internal:host-gateway"

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: server/UsersDockerfile
    ports:
      - "${APP_PORT}:{APP_PORT}" 
    environment:
      - APP_PORT=7001
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=Host=postgres;Port=5432;Database=cinema_users;Username=postgres;Password=1;Timezone=Europe/Minsk;
    volumes:
      - ./server/ApiGateway/certificates/localhost.pfx:/app/localhost.pfx  


  movie-service:
    container_name: movie-service
    build:
      context: .
      dockerfile: server/MoviesDockerfile
    ports:
      - "${APP_PORT}:{APP_PORT}" 
    environment:
      - APP_PORT=7002
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=Host=postgres;Port=5432;Database=cinema_movies;Username=postgres;Password=1;Timezone=Europe/Minsk;
      - REDIS_CONFIGURATION=redis:6379
    volumes:
      - ./server/ApiGateway/certificates/localhost.pfx:/app/localhost.pfx  


  booking-service:
    container_name: booking-service
    build:
      context: .
      dockerfile: server/BookingsDockerfile
    ports:
      - "${APP_PORT}:{APP_PORT}" 
    environment:
      - APP_PORT=7003
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=mongodb://root:password@mongodb:27017/CinemaBookings
      - DATABASE_NAME=CinemaBookings
      - REDIS_CONFIGURATION=redis:6379
    volumes:
      - ./server/ApiGateway/certificates/localhost.pfx:/app/localhost.pfx


  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: always


  mongodb:
    container_name: mongodb
    image: mongo:latest
    environment:
    - MONGO_INITDB_ROOT_USERNAME=root
    - MONGO_INITDB_ROOT_PASSWORD=password
    - MONGO_INITDB_DATABASE=admin
    volumes:
      - ./docker_data/mongodb:/data/db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always


  redis:
    container_name: redis
    image: redis:latest
    restart: always
    environment:
      REDIS_PASSWORD: 1
    ports:
      - 6379:6379


  rabbitmq:
    container_name: rabbit-mq
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    restart: unless-stopped
    

volumes:
  postgres-data:
  mongo_data: